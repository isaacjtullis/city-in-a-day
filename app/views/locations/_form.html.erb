<div class="location-form">
    <div id="map">
      <script>
      // This example adds a search box to a map, using the Google Place Autocomplete
      // feature. People can enter geographical searches. The search box will return a
      // pick list containing a mix of places and predicted search terms.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
//       function getAddress (latitude, longitude) {
//         $.ajax('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + latitude + ',' + longitude + '&key=' + GOOGLE_MAP_KEY)
//         .then(
//           function success (response) {
//             console.log('User\'s Address Data is ', response)
//           },
//           function fail (status) {
//             console.log('Request failed.  Returned status of',
//                         status)
//           }
//         )
//       }
// getAddress(6.4531, 3.3958)
      function initAutocomplete() {
          map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 0, lng: 0},
            zoom: 13,
            mapTypeId: 'roadmap'
          });

          if ("geolocation" in navigator) {
                // check if geolocation is supported/enabled on current browser
          navigator.geolocation.getCurrentPosition(
            function success(position) {
                // for when getting location is a success
            console.log('latitude', position.coords.latitude,
                       'longitude', position.coords.longitude);

           map = new google.maps.Map(document.getElementById('map'), {
             center: {lat: position.coords.latitude, lng: position.coords.longitude},
             zoom: 13,
             mapTypeId: 'roadmap'
           });
            },
            function error(error_message) {
            // for when getting location results in an error
              console.error('An error has occured while retrievinglocation', error_message)
            }
        )}

        // Create the search box and link it to the UI element.
        //var locationLocation = document.getElementById('location_location');
        //$('pac-input').val($('pac-input').val() + locationLocation);
        var input = document.getElementById('trailLocation');

        var searchBox = new google.maps.places.SearchBox(input);
        //var searchBox = new google.maps.places.SearchBox(input);
        //map.controls.push(input);
        //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));
            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          var location = places[0].formatted_address
          $('#location_location').val($('#location_location').val() + location);
          map.fitBounds(bounds);

        });
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCACtIQEVjdUv4i8kaQHqApZpc0CA7jUCA&libraries=places&callback=initAutocomplete"
    async defer></script>
  </div>
